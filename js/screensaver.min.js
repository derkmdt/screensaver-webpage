function processBolcomProducts(){}function loadData(t,e,n){jQuery(".backdrop."+t).addClass("visible"),$.ajax({url:e,type:"GET",success:function(e){if("undefined"==typeof e.errors||e.errors.length<1){var i;i=-1!=n.feed.indexOf("bolpuntcom")?e.products:-1!=n.feed.indexOf("nunl")?e:processTweets(e),jQuery(".backdrop."+t+" .tw").addClass("animation")}else $(".post .message .text-message").text("Response error")},error:function(t){$(".post .message .text-message").text("Request error")}})}function Swipe(t,e){"use strict";function n(){v=b.children,w=v.length,v.length<2&&(e.continuous=!1),p.transitions&&e.continuous&&v.length<3&&(b.appendChild(v[0].cloneNode(!0)),b.appendChild(b.children[1].cloneNode(!0)),v=b.children),m=new Array(v.length),g=t.getBoundingClientRect().width||t.offsetWidth,b.style.width=v.length*g+"px";for(var n=v.length;n--;){var i=v[n];i.style.width=g+"px",i.setAttribute("data-index",n),p.transitions&&(i.style.left=n*-g+"px",s(n,x>n?-g:n>x?g:0,0))}e.continuous&&p.transitions&&(s(r(x-1),-g,0),s(r(x+1),g,0)),p.transitions||(b.style.left=x*-g+"px"),t.style.visibility="visible"}function i(){e.continuous?a(x-1):x&&a(x-1)}function o(){e.continuous?a(x+1):x<v.length-1&&a(x+1)}function r(t){return(v.length+t%v.length)%v.length}function a(t,n){if(x!=t){if(p.transitions){var i=Math.abs(x-t)/(x-t);if(e.continuous){var o=i;i=-m[r(t)]/g,i!==o&&(t=-i*v.length+t)}for(var a=Math.abs(x-t)-1;a--;)s(r((t>x?t:x)-a-1),g*i,0);t=r(t),s(x,g*i,n||y),s(t,0,n||y),e.continuous&&s(r(t-i),-(g*i),0)}else t=r(t),d(x*-g,t*-g,n||y);x=t,f(e.callback&&e.callback(x,v[x]))}}function s(t,e,n){c(t,e,n),m[t]=e}function c(t,e,n){var i=v[t],o=i&&i.style;o&&(o.webkitTransitionDuration=o.MozTransitionDuration=o.msTransitionDuration=o.OTransitionDuration=o.transitionDuration=n+"ms",o.webkitTransform="translate("+e+"px,0)translateZ(0)",o.msTransform=o.MozTransform=o.OTransform="translateX("+e+"px)")}function d(t,n,i){if(!i)return void(b.style.left=n+"px");var o=+new Date,r=setInterval(function(){var a=+new Date-o;return a>i?(b.style.left=n+"px",E&&u(),e.transitionEnd&&e.transitionEnd.call(event,x,v[x]),void clearInterval(r)):void(b.style.left=(n-t)*(Math.floor(a/i*100)/100)+t+"px")},4)}function u(){S=setTimeout(o,E)}function l(){E=0,clearTimeout(S)}var h=function(){},f=function(t){setTimeout(t||h,0)},p={addEventListener:!!window.addEventListener,touch:"ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch,transitions:function(t){var e=["transitionProperty","WebkitTransition","MozTransition","OTransition","msTransition"];for(var n in e)if(void 0!==t.style[e[n]])return!0;return!1}(document.createElement("swipe"))};if(t){var v,m,g,w,b=t.children[0];e=e||{};var x=parseInt(e.startSlide,10)||0,y=e.speed||300;e.continuous=void 0!==e.continuous?e.continuous:!0;var S,T,E=e.auto||0,k={},D={},L={handleEvent:function(t){switch(t.type){case"touchstart":this.start(t);break;case"touchmove":this.move(t);break;case"touchend":f(this.end(t));break;case"webkitTransitionEnd":case"msTransitionEnd":case"oTransitionEnd":case"otransitionend":case"transitionend":f(this.transitionEnd(t));break;case"resize":f(n)}e.stopPropagation&&t.stopPropagation()},start:function(t){var e=t.touches[0];k={x:e.pageX,y:e.pageY,time:+new Date},T=void 0,D={},b.addEventListener("touchmove",this,!1),b.addEventListener("touchend",this,!1)},move:function(t){if(!(t.touches.length>1||t.scale&&1!==t.scale)){e.disableScroll&&t.preventDefault();var n=t.touches[0];D={x:n.pageX-k.x,y:n.pageY-k.y},"undefined"==typeof T&&(T=!!(T||Math.abs(D.x)<Math.abs(D.y))),T||(t.preventDefault(),l(),e.continuous?(c(r(x-1),D.x+m[r(x-1)],0),c(x,D.x+m[x],0),c(r(x+1),D.x+m[r(x+1)],0)):(D.x=D.x/(!x&&D.x>0||x==v.length-1&&D.x<0?Math.abs(D.x)/g+1:1),c(x-1,D.x+m[x-1],0),c(x,D.x+m[x],0),c(x+1,D.x+m[x+1],0)))}},end:function(t){var n=+new Date-k.time,i=Number(n)<250&&Math.abs(D.x)>20||Math.abs(D.x)>g/2,o=!x&&D.x>0||x==v.length-1&&D.x<0;e.continuous&&(o=!1);var a=D.x<0;T||(i&&!o?(a?(e.continuous?(s(r(x-1),-g,0),s(r(x+2),g,0)):s(x-1,-g,0),s(x,m[x]-g,y),s(r(x+1),m[r(x+1)]-g,y),x=r(x+1)):(e.continuous?(s(r(x+1),g,0),s(r(x-2),-g,0)):s(x+1,g,0),s(x,m[x]+g,y),s(r(x-1),m[r(x-1)]+g,y),x=r(x-1)),e.callback&&e.callback(x,v[x])):e.continuous?(s(r(x-1),-g,y),s(x,0,y),s(r(x+1),g,y)):(s(x-1,-g,y),s(x,0,y),s(x+1,g,y))),b.removeEventListener("touchmove",L,!1),b.removeEventListener("touchend",L,!1)},transitionEnd:function(t){parseInt(t.target.getAttribute("data-index"),10)==x&&(E&&u(),e.transitionEnd&&e.transitionEnd.call(t,x,v[x]))}};return n(),E&&u(),p.addEventListener?(p.touch&&b.addEventListener("touchstart",L,!1),p.transitions&&(b.addEventListener("webkitTransitionEnd",L,!1),b.addEventListener("msTransitionEnd",L,!1),b.addEventListener("oTransitionEnd",L,!1),b.addEventListener("otransitionend",L,!1),b.addEventListener("transitionend",L,!1)),window.addEventListener("resize",L,!1)):window.onresize=function(){n()},{setup:function(){n()},slide:function(t,e){l(),a(t,e)},prev:function(){l(),i()},next:function(){l(),o()},stop:function(){l()},getPos:function(){return x},getNumSlides:function(){return w},kill:function(){l(),b.style.width="",b.style.left="";for(var t=v.length;t--;){var e=v[t];e.style.width="",e.style.left="",p.transitions&&c(t,0,0)}p.addEventListener?(b.removeEventListener("touchstart",L,!1),b.removeEventListener("webkitTransitionEnd",L,!1),b.removeEventListener("msTransitionEnd",L,!1),b.removeEventListener("oTransitionEnd",L,!1),b.removeEventListener("otransitionend",L,!1),b.removeEventListener("transitionend",L,!1),window.removeEventListener("resize",L,!1)):window.onresize=null}}}}function distanceOfTimeInWords(t,e,n){var i=t.getTime(),o=e.getTime(),r=Math.round(Math.abs(i-o)/1e3),a=Math.round(r/60);return 1>=a?n?5>r?"5 seconde geleden":10>r?"10 seconde geleden":20>r?"20 seconde geleden":40>r?"30 seconde geleden":60>r?"een minuut geleden":"1 minuut geleden":0===a?"minder dan een minuut":"1 minuut":45>a?a+" minuten geleden":70>a?"1 uur geleden":1440>a?Math.round(a/60)+" uur geleden":2880>a?"1 dag geleden":43200>a?Math.round(a/1440)+" dagen geleden":86400>a?"ruim 1 maand geleden":525600>a?Math.round(a/43200)+" maanden geleden":Math.round(a/525600)+" jaren geleden"}function processTweets(t,e){var n=[];return $.each(t,function(t,e){var i=e;i.text=e.text.parseURL().parseUsername().parseHashtag();var o=e.created.parseDate();delete i.created;var r=new Date;i.date=distanceOfTimeInWords(r,o,!0)+" geplaatst",i.tweetUrl="https://twitter.com/-/status/"+e.tweetId,i.retweetUrl="https://twitter.com/intent/retweet?tweet_id="+e.tweetId,i.replyUrl="https://twitter.com/intent/tweet?in_reply_to="+e.tweetId,i.likeUrl="https://twitter.com/intent/like?tweet_id="+e.tweetId,i.followUrl="https://twitter.com/intent/follow?screen_name="+e.screenName,n.push(i)}),n}!function(){APP={Views:{}}}(),function(t,e){if("function"==typeof define&&define.amd)define(["underscore","backbone"],function(n,i){e(t,n,i)});else if("undefined"!=typeof exports){var n=require("underscore"),i=require("backbone");e(t,n,i)}else e(t,t._,t.Backbone)}(this,function(t,e,n){var i=n.ViewState=function(t){var n=t||{};this.attributes=e.clone(n)};return e.extend(i.prototype,n.Events,{get:function(t){return this.attributes[t]},getAttributes:function(){return e.clone(this.attributes)},set:function(t,n,i){var o,r,a,s,c,d=[];if(null===t)return this;"object"==typeof t?(o=t,i=n):(o={})[t]=n,i||(i={}),c=i.unset,s=i.silent,a=this.attributes;for(r in o)n=o[r],e.isEqual(a[r],n)||d.push(r),c?delete a[r]:a[r]=n;if(!s){for(var u=0,l=d.length;l>u;u++)this.trigger("change:"+d[u],this,a[d[u]],i);this.trigger("change",this,i)}return this},unset:function(t,n){return this.set(t,void 0,e.extend({},n,{unset:!0}))},clear:function(t){var n={};for(var i in this.attributes)n[i]=void 0;return this.set(n,e.extend({},t,{unset:!0}))}}),n.ViewState}),APP.Store=function(t,e){var n=new e.Collection,i=new e.ViewState({activeIndex:-1});return{start:function(t){n.reset(t),n.invoke("set",{dataSet:!1})},getState:function(){return i},getSlideCollection:function(){return n}}}(this._,this.Backbone),(window.jQuery||window.Zepto)&&!function(t){t.fn.Swipe=function(e){return this.each(function(){t(this).data("Swipe",new Swipe(t(this)[0],e))})}}(window.jQuery||window.Zepto),String.prototype.parseURL=function(){return this.replace(/[A-Za-z]+:\/\/[A-Za-z0-9-_]+\.[A-Za-z0-9-_:%&~\?\/.=]+/g,function(t){return t.link(t)})},String.prototype.parseUsername=function(){return this.replace(/[@]+[A-Za-z0-9-_]+/g,function(t){var e=t.replace("@","");return t.link("https://twitter.com/"+e)})},String.prototype.parseHashtag=function(){return this.replace(/[#]+[A-Za-z0-9-_]+/g,function(t){var e=t.replace("#","%23");return t.link("https://twitter.com/search?q="+e)})},String.prototype.parseDate=function(){var t=this.replace(/(\+\S+) (.*)/,"$2 $1"),e=new Date(Date.parse(t));return e},function(t,e,n){APP.Views.Slideshow=e.View.extend({initialize:function(t){this.timeSet=t.timeSet,this.templateName=t.templateName,this.render(),this.listenTo(APP.Store.getState(),"change:activeIndex",this.slide);var e=Math.floor(Math.random()*this.collection.length-1);APP.Store.getState().set("activeIndex",e),console.log(e);var i=document.getElementById("mySwipe");window.mySwipe=n(i,{startSlide:e,auto:8e3,callback:function(t,e){console.log(t),APP.Store.getState().set("activeIndex",t)}}),this.binds()},binds:function(){t.bindAll(this,"keyDown"),$(document).on("keydown",this.keyDown)},keyDown:function(t){switch(t.keyCode){case 37:window.mySwipe.prev();break;case 38:this.stopTimerSlide();break;case 39:window.mySwipe.next();break;case 40:this.stopTimerSlide()}},slide:function(){var t,e,n=APP.Store.getState().get("activeIndex"),i=this.collection.length;n===i?n=0:-1===n&&(n=i-1),APP.Store.getState().set("activeIndex",n,{silent:!0}),n===i-1?(t=0,e=n-1):0===n?(e=i-1,t=n+1):(t=n+1,e=n-1);var o=this.$el.find('[data-id="'+e+'"]');this.collection.get(e).get("dataSet")||(this.addContentToTemplate(o,e),this.collection.get(e).set("dataSet",!0));var r=this.$el.find('[data-id="'+n+'"]');this.collection.get(n).get("dataSet")||(this.addContentToTemplate(r,n),this.collection.get(n).set("dataSet",!0));var a=this.$el.find('[data-id="'+t+'"]');this.collection.get(t).get("dataSet")||(this.addContentToTemplate(a,t),this.collection.get(t).set("dataSet",!0))},getTemplateData:function(t){var e=this.collection.get(t);return e.toJSON()},addContentToTemplate:function(t,e){var n=$(this.templateName).html();this.template=Handlebars.compile(n),t.append(this.template(this.getTemplateData(e)))},render:function(){var t=$("#placeholder-template").html();return this.template=Handlebars.compile(t),this.collection.each(function(t){this.$el.append(this.template(t.toJSON()))},this),this}})}(this._,Backbone,Swipe);
//# sourceMappingURL=data:application/json;base64,
