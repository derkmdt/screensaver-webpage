function loadData(e,t,n){jQuery(".backdrop."+e).addClass("visible"),$.ajax({url:t,type:"GET",success:function(t){if(void 0===t.errors||t.errors.length<1){var i,o=8e3;-1!=n.feed.indexOf("bolpuntcom")?i=t.products:-1!=n.feed.indexOf("bolcomreclames")?(i=t,o=0):i=-1!=n.feed.indexOf("nunl")?t:processTweets(t),jQuery(".backdrop."+e+" .tw").addClass("animation"),jQuery(".backdrop."+e+" .tw").one("webkitAnimationEnd oanimationend msAnimationEnd animationend",function(t){APP.Store.start(i),APP.Slideshow=new APP.Views.Slideshow({el:$(".template-holder"),templateName:"#"+e+"-template",collection:new APP.Store.getSlideCollection,timeSet:o,handle:e}),$(".backdrop."+e).removeClass("visible")})}else $(".post .message .text-message").text("Response error")},error:function(e){$(".post .message .text-message").text("Request error")}})}function Swipe(e,t){"use strict";function n(){g=b.children,w=g.length,g.length<2&&(t.continuous=!1),p.transitions&&t.continuous&&g.length<3&&(b.appendChild(g[0].cloneNode(!0)),b.appendChild(b.children[1].cloneNode(!0)),g=b.children),m=new Array(g.length),v=e.getBoundingClientRect().width||e.offsetWidth,b.style.width=g.length*v+"px";for(var n=g.length;n--;){var i=g[n];i.style.width=v+"px",i.setAttribute("data-index",n),p.transitions&&(i.style.left=n*-v+"px",s(n,y>n?-v:y<n?v:0,0))}t.continuous&&p.transitions&&(s(a(y-1),-v,0),s(a(y+1),v,0)),p.transitions||(b.style.left=y*-v+"px"),e.style.visibility="visible"}function i(){t.continuous?r(y-1):y&&r(y-1)}function o(){t.continuous?r(y+1):y<g.length-1&&r(y+1)}function a(e){return(g.length+e%g.length)%g.length}function r(e,n){if(y!=e){if(p.transitions){var i=Math.abs(y-e)/(y-e);if(t.continuous){var o=i;(i=-m[a(e)]/v)!==o&&(e=-i*g.length+e)}for(var r=Math.abs(y-e)-1;r--;)s(a((e>y?e:y)-r-1),v*i,0);e=a(e),s(y,v*i,n||S),s(e,0,n||S),t.continuous&&s(a(e-i),-v*i,0)}else e=a(e),c(y*-v,e*-v,n||S);y=e,f(t.callback&&t.callback(y,g[y]))}}function s(e,t,n){l(e,t,n),m[e]=t}function l(e,t,n){var i=g[e],o=i&&i.style;o&&(o.webkitTransitionDuration=o.MozTransitionDuration=o.msTransitionDuration=o.OTransitionDuration=o.transitionDuration=n+"ms",o.webkitTransform="translate("+t+"px,0)translateZ(0)",o.msTransform=o.MozTransform=o.OTransform="translateX("+t+"px)")}function c(e,n,i){if(i)var o=+new Date,a=setInterval(function(){var r=+new Date-o;if(r>i)return b.style.left=n+"px",k&&d(),t.transitionEnd&&t.transitionEnd.call(event,y,g[y]),void clearInterval(a);b.style.left=(n-e)*(Math.floor(r/i*100)/100)+e+"px"},4);else b.style.left=n+"px"}function d(){x=setTimeout(o,k)}function u(){k=0,clearTimeout(x)}var h=function(){},f=function(e){setTimeout(e||h,0)},p={addEventListener:!!window.addEventListener,touch:"ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch,transitions:function(e){var t=["transitionProperty","WebkitTransition","MozTransition","OTransition","msTransition"];for(var n in t)if(void 0!==e.style[t[n]])return!0;return!1}(document.createElement("swipe"))};if(e){var g,m,v,w,b=e.children[0];t=t||{};var y=parseInt(t.startSlide,10)||0,S=t.speed||300;t.continuous=void 0===t.continuous||t.continuous;var x,T,k=t.auto||0,E={},P={},A={handleEvent:function(e){switch(e.type){case"touchstart":this.start(e);break;case"touchmove":this.move(e);break;case"touchend":f(this.end(e));break;case"webkitTransitionEnd":case"msTransitionEnd":case"oTransitionEnd":case"otransitionend":case"transitionend":f(this.transitionEnd(e));break;case"resize":f(n)}t.stopPropagation&&e.stopPropagation()},start:function(e){var t=e.touches[0];E={x:t.pageX,y:t.pageY,time:+new Date},T=void 0,P={},b.addEventListener("touchmove",this,!1),b.addEventListener("touchend",this,!1)},move:function(e){if(!(e.touches.length>1||e.scale&&1!==e.scale)){t.disableScroll&&e.preventDefault();var n=e.touches[0];P={x:n.pageX-E.x,y:n.pageY-E.y},void 0===T&&(T=!!(T||Math.abs(P.x)<Math.abs(P.y))),T||(e.preventDefault(),u(),t.continuous?(l(a(y-1),P.x+m[a(y-1)],0),l(y,P.x+m[y],0),l(a(y+1),P.x+m[a(y+1)],0)):(P.x=P.x/(!y&&P.x>0||y==g.length-1&&P.x<0?Math.abs(P.x)/v+1:1),l(y-1,P.x+m[y-1],0),l(y,P.x+m[y],0),l(y+1,P.x+m[y+1],0)))}},end:function(e){var n=+new Date-E.time,i=Number(n)<250&&Math.abs(P.x)>20||Math.abs(P.x)>v/2,o=!y&&P.x>0||y==g.length-1&&P.x<0;t.continuous&&(o=!1);var r=P.x<0;T||(i&&!o?(r?(t.continuous?(s(a(y-1),-v,0),s(a(y+2),v,0)):s(y-1,-v,0),s(y,m[y]-v,S),s(a(y+1),m[a(y+1)]-v,S),y=a(y+1)):(t.continuous?(s(a(y+1),v,0),s(a(y-2),-v,0)):s(y+1,v,0),s(y,m[y]+v,S),s(a(y-1),m[a(y-1)]+v,S),y=a(y-1)),t.callback&&t.callback(y,g[y])):t.continuous?(s(a(y-1),-v,S),s(y,0,S),s(a(y+1),v,S)):(s(y-1,-v,S),s(y,0,S),s(y+1,v,S))),b.removeEventListener("touchmove",A,!1),b.removeEventListener("touchend",A,!1)},transitionEnd:function(e){parseInt(e.target.getAttribute("data-index"),10)==y&&(k&&d(),t.transitionEnd&&t.transitionEnd.call(e,y,g[y]))}};return n(),k&&d(),p.addEventListener?(p.touch&&b.addEventListener("touchstart",A,!1),p.transitions&&(b.addEventListener("webkitTransitionEnd",A,!1),b.addEventListener("msTransitionEnd",A,!1),b.addEventListener("oTransitionEnd",A,!1),b.addEventListener("otransitionend",A,!1),b.addEventListener("transitionend",A,!1)),window.addEventListener("resize",A,!1)):window.onresize=function(){n()},{setup:function(){n()},slide:function(e,t){u(),r(e,t)},prev:function(){u(),i()},next:function(){u(),o()},stop:function(){u()},getPos:function(){return y},getNumSlides:function(){return w},kill:function(){u(),b.style.width="",b.style.left="";for(var e=g.length;e--;){var t=g[e];t.style.width="",t.style.left="",p.transitions&&l(e,0,0)}p.addEventListener?(b.removeEventListener("touchstart",A,!1),b.removeEventListener("webkitTransitionEnd",A,!1),b.removeEventListener("msTransitionEnd",A,!1),b.removeEventListener("oTransitionEnd",A,!1),b.removeEventListener("otransitionend",A,!1),b.removeEventListener("transitionend",A,!1),window.removeEventListener("resize",A,!1)):window.onresize=null}}}}function distanceOfTimeInWords(e,t,n){var i=e.getTime(),o=t.getTime(),a=Math.round(Math.abs(i-o)/1e3),r=Math.round(a/60);return r<=1?n?a<5?"5 seconde geleden":a<10?"10 seconde geleden":a<20?"20 seconde geleden":a<40?"30 seconde geleden":a<60?"een minuut geleden":"1 minuut geleden":0===r?"minder dan een minuut":"1 minuut":r<45?r+" minuten geleden":r<70?"1 uur geleden":r<1440?Math.round(r/60)+" uur geleden":r<2880?"1 dag geleden":r<43200?Math.round(r/1440)+" dagen geleden":r<86400?"ruim 1 maand geleden":r<525600?Math.round(r/43200)+" maanden geleden":Math.round(r/525600)+" jaren geleden"}function processTweets(e,t){var n=[];return $.each(e,function(e,t){var i=t;i.hasExternalUrl||(t.text=t.text.parseURL()),i.text=t.text.parseUsername().parseHashtag();var o=i.created.parseDate();delete i.created;var a=new Date;i.date=distanceOfTimeInWords(a,o,!0)+" geplaatst",i.tweetUrl="https://twitter.com/-/status/"+i.tweetId,i.retweetUrl="https://twitter.com/intent/retweet?tweet_id="+i.tweetId,i.replyUrl="https://twitter.com/intent/tweet?in_reply_to="+i.tweetId,i.likeUrl="https://twitter.com/intent/like?tweet_id="+i.tweetId,i.followUrl="https://twitter.com/intent/follow?screen_name="+i.screenName,n.push(i)}),n}function addPlayer(e,t){console.log(e),APP.YouTube.youtubePlayer=[],APP.YouTube.youtubePlayer[e]=new YT.Player("youtube-player"+e,{width:"100%",height:"100%",videoId:t,events:{onStateChange:onPlayerStateChange}}),console.log(APP.YouTube.youtubePlayer[e])}function onPlayerStateChange(e){switch(console.log(e.target),e.data){case-1:console.log("video unstarted"),console.log("Duration:"+e.target.getDuration());case 0:console.log("video ended");break;case 1:console.log("video playing from "+e.target.getCurrentTime());break;case 2:console.log("video paused at "+e.target.getCurrentTime());break;case 3:console.log("video buffering");case 5:console.log("video cued")}}!function(){APP={Views:{},YouTube:{}}}(),function(e,t){if("function"==typeof define&&define.amd)define(["underscore","backbone"],function(n,i){t(e,n,i)});else if("undefined"!=typeof exports){var n=require("underscore"),i=require("backbone");t(e,n,i)}else t(e,e._,e.Backbone)}(this,function(e,t,n){var i=n.ViewState=function(e){var n=e||{};this.attributes=t.clone(n)};return t.extend(i.prototype,n.Events,{get:function(e){return this.attributes[e]},getAttributes:function(){return t.clone(this.attributes)},set:function(e,n,i){var o,a,r,s,l,c=[];if(null===e)return this;"object"==typeof e?(o=e,i=n):(o={})[e]=n,i||(i={}),l=i.unset,s=i.silent,r=this.attributes;for(a in o)n=o[a],t.isEqual(r[a],n)||c.push(a),l?delete r[a]:r[a]=n;if(!s){for(var d=0,u=c.length;d<u;d++)this.trigger("change:"+c[d],this,r[c[d]],i);this.trigger("change",this,i)}return this},unset:function(e,n){return this.set(e,void 0,t.extend({},n,{unset:!0}))},clear:function(e){var n={};for(var i in this.attributes)n[i]=void 0;return this.set(n,t.extend({},e,{unset:!0}))}}),n.ViewState}),APP.Store=function(e,t){var n=new t.Collection,i=new t.ViewState({activeIndex:-1});return{start:function(e){n.reset(e),n.invoke("set",{dataSet:!1})},getState:function(){return i},getSlideCollection:function(){return n}}}(this._,this.Backbone),(window.jQuery||window.Zepto)&&function(e){e.fn.Swipe=function(t){return this.each(function(){e(this).data("Swipe",new Swipe(e(this)[0],t))})}}(window.jQuery||window.Zepto),String.prototype.parseURL=function(){return this.replace(/[A-Za-z]+:\/\/[A-Za-z0-9-_]+\.[A-Za-z0-9-_:%&~\?\/.=]+/g,function(e){return e.link(e).openUrlBlank()})},String.prototype.parseUsername=function(){return this.replace(/ [@]+[A-Za-z0-9-_]+/g,function(e){var t=e.replace(" @","");return e.link("https://twitter.com/"+t).openUrlBlank()})},String.prototype.parseHashtag=function(){return this.replace(/ [#]+[A-Za-z0-9-_]+/g,function(e){var t=e.replace(" #","%23");return e.link("https://twitter.com/search?q="+t).openUrlBlank()})},String.prototype.parseDate=function(){var e=this.replace(/(\+\S+) (.*)/,"$2 $1");return new Date(Date.parse(e))},String.prototype.openUrlBlank=function(){return this.replace(/^<a/,'$& target="_blank"')},function(e,t,n){APP.Views.Slideshow=t.View.extend({initialize:function(e){this.timeSet=e.timeSet,this.templateName=e.templateName,this.handle=e.handle,this.render(),this.listenTo(APP.Store.getState(),"change:activeIndex",this.slide);var t=Math.floor(Math.random()*this.collection.length-1);APP.Store.getState().set("activeIndex",t);var i=document.getElementById("mySwipe");window.mySwipe=n(i,{startSlide:t,auto:this.timeSet,callback:function(e,t){console.log("callback"),APP.Store.getState().set("activeIndex",e)}}),this.binds()},binds:function(){e.bindAll(this,"keyDown"),$(document).on("keydown",this.keyDown)},keyDown:function(e){switch(e.keyCode){case 37:window.mySwipe.prev();break;case 38:this.stopTimerSlide();break;case 39:window.mySwipe.next();break;case 40:this.stopTimerSlide()}},slide:function(){var e,t,n=APP.Store.getState().get("activeIndex"),i=this.collection.length;n===i?n=0:-1===n&&(n=i-1),APP.Store.getState().set("activeIndex",n,{silent:!0}),n===i-1?(e=0,t=n-1):0===n?(t=i-1,e=n+1):(e=n+1,t=n-1);var o=this.$el.find('[data-id="'+t+'"]');this.collection.get(t).get("dataSet")||(this.addContentToTemplate(o,t),"bolcomreclames"===this.handle&&addPlayer(t,this.collection.get(t).get("url")),this.collection.get(t).set("dataSet",!0));var a=this.$el.find('[data-id="'+n+'"]');this.collection.get(n).get("dataSet")||(this.addContentToTemplate(a,n),"bolcomreclames"===this.handle&&addPlayer(n,this.collection.get(n).get("url")),this.collection.get(n).set("dataSet",!0));var r=this.$el.find('[data-id="'+e+'"]');this.collection.get(e).get("dataSet")||(this.addContentToTemplate(r,e),"bolcomreclames"===this.handle&&addPlayer(e,this.collection.get(e).get("url")),this.collection.get(e).set("dataSet",!0))},getTemplateData:function(e){return this.collection.get(e).toJSON()},addContentToTemplate:function(e,t){var n=$(this.templateName).html();this.template=Handlebars.compile(n),e.append(this.template(this.getTemplateData(t)))},render:function(){var e=$("#placeholder-template").html();return this.template=Handlebars.compile(e),this.collection.each(function(e){this.$el.append(this.template(e.toJSON()))},this),this}})}(this._,Backbone,Swipe);var tag=document.createElement("script");tag.src="https://www.youtube.com/iframe_api";var firstScriptTag=document.getElementsByTagName("script")[0];firstScriptTag.parentNode.insertBefore(tag,firstScriptTag);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
