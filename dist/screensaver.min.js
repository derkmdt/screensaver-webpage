function loadData(i,e,o){jQuery(".backdrop."+i).addClass("visible"),$.ajax({url:e,type:"GET",success:function(e){if(void 0===e.errors||e.errors.length<1){var t,n=8e3;-1!=o.feed.indexOf("bolpuntcom")?t=e.products:-1!=o.feed.indexOf("bolcomreclames")?(t=e,n=0):t=-1!=o.feed.indexOf("nunl")?e:processTweets(e),jQuery(".backdrop."+i+" .tw").addClass("animation"),jQuery(".backdrop."+i+" .tw").one("webkitAnimationEnd oanimationend msAnimationEnd animationend",function(e){APP.Store.start(t),APP.Slideshow=new APP.Views.Slideshow({el:$(".template-holder"),templateName:"#"+i+"-template",collection:new APP.Store.getSlideCollection,timeSet:n,handle:i}),$(".backdrop."+i).removeClass("visible")})}else $(".post .message .text-message").text("Response error")},error:function(e){$(".post .message .text-message").text("Request error")}})}function Swipe(n,r){"use strict";var t=function(){},a=function(e){setTimeout(e||t,0)},s={addEventListener:!!window.addEventListener,touch:"ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch,transitions:function(e){var t=["transitionProperty","WebkitTransition","MozTransition","OTransition","msTransition"];for(var n in t)if(void 0!==e.style[t[n]])return!0;return!1}(document.createElement("swipe"))};if(n){var l,c,d,i,u=n.children[0];r=r||{};var h=parseInt(r.startSlide,10)||0,p=r.speed||300;r.continuous=void 0===r.continuous||r.continuous;var e,f,g=r.auto||0,m={},v={},w={handleEvent:function(e){switch(e.type){case"touchstart":this.start(e);break;case"touchmove":this.move(e);break;case"touchend":a(this.end(e));break;case"webkitTransitionEnd":case"msTransitionEnd":case"oTransitionEnd":case"otransitionend":case"transitionend":a(this.transitionEnd(e));break;case"resize":a(o)}r.stopPropagation&&e.stopPropagation()},start:function(e){var t=e.touches[0];m={x:t.pageX,y:t.pageY,time:+new Date},f=void 0,v={},u.addEventListener("touchmove",this,!1),u.addEventListener("touchend",this,!1)},move:function(e){if(!(1<e.touches.length||e.scale&&1!==e.scale)){r.disableScroll&&e.preventDefault();var t=e.touches[0];v={x:t.pageX-m.x,y:t.pageY-m.y},void 0===f&&(f=!!(f||Math.abs(v.x)<Math.abs(v.y))),f||(e.preventDefault(),E(),r.continuous?(T(y(h-1),v.x+c[y(h-1)],0),T(h,v.x+c[h],0),T(y(h+1),v.x+c[y(h+1)],0)):(v.x=v.x/(!h&&0<v.x||h==l.length-1&&v.x<0?Math.abs(v.x)/d+1:1),T(h-1,v.x+c[h-1],0),T(h,v.x+c[h],0),T(h+1,v.x+c[h+1],0)))}},end:function(e){var t=+new Date-m.time,n=Number(t)<250&&20<Math.abs(v.x)||Math.abs(v.x)>d/2,i=!h&&0<v.x||h==l.length-1&&v.x<0;r.continuous&&(i=!1);var o=v.x<0;f||(n&&!i?(o?(r.continuous?(x(y(h-1),-d,0),x(y(h+2),d,0)):x(h-1,-d,0),x(h,c[h]-d,p),x(y(h+1),c[y(h+1)]-d,p),h=y(h+1)):(r.continuous?(x(y(h+1),d,0),x(y(h-2),-d,0)):x(h+1,d,0),x(h,c[h]+d,p),x(y(h-1),c[y(h-1)]+d,p),h=y(h-1)),r.callback&&r.callback(h,l[h])):r.continuous?(x(y(h-1),-d,p),x(h,0,p),x(y(h+1),d,p)):(x(h-1,-d,p),x(h,0,p),x(h+1,d,p))),u.removeEventListener("touchmove",w,!1),u.removeEventListener("touchend",w,!1)},transitionEnd:function(e){parseInt(e.target.getAttribute("data-index"),10)==h&&(g&&k(),r.transitionEnd&&r.transitionEnd.call(e,h,l[h]))}};return o(),g&&k(),s.addEventListener?(s.touch&&u.addEventListener("touchstart",w,!1),s.transitions&&(u.addEventListener("webkitTransitionEnd",w,!1),u.addEventListener("msTransitionEnd",w,!1),u.addEventListener("oTransitionEnd",w,!1),u.addEventListener("otransitionend",w,!1),u.addEventListener("transitionend",w,!1)),window.addEventListener("resize",w,!1)):window.onresize=function(){o()},{setup:function(){o()},slide:function(e,t){E(),S(e,t)},prev:function(){E(),r.continuous?S(h-1):h&&S(h-1)},next:function(){E(),b()},stop:function(){E()},getPos:function(){return h},getNumSlides:function(){return i},kill:function(){E(),u.style.width="",u.style.left="";for(var e=l.length;e--;){var t=l[e];t.style.width="",t.style.left="",s.transitions&&T(e,0,0)}s.addEventListener?(u.removeEventListener("touchstart",w,!1),u.removeEventListener("webkitTransitionEnd",w,!1),u.removeEventListener("msTransitionEnd",w,!1),u.removeEventListener("oTransitionEnd",w,!1),u.removeEventListener("otransitionend",w,!1),u.removeEventListener("transitionend",w,!1),window.removeEventListener("resize",w,!1)):window.onresize=null}}}function o(){l=u.children,i=l.length,l.length<2&&(r.continuous=!1),s.transitions&&r.continuous&&l.length<3&&(u.appendChild(l[0].cloneNode(!0)),u.appendChild(u.children[1].cloneNode(!0)),l=u.children),c=new Array(l.length),d=n.getBoundingClientRect().width||n.offsetWidth,u.style.width=l.length*d+"px";for(var e=l.length;e--;){var t=l[e];t.style.width=d+"px",t.setAttribute("data-index",e),s.transitions&&(t.style.left=e*-d+"px",x(e,e<h?-d:h<e?d:0,0))}r.continuous&&s.transitions&&(x(y(h-1),-d,0),x(y(h+1),d,0)),s.transitions||(u.style.left=h*-d+"px"),n.style.visibility="visible"}function b(){r.continuous?S(h+1):h<l.length-1&&S(h+1)}function y(e){return(l.length+e%l.length)%l.length}function S(e,t){if(h!=e){if(s.transitions){var n=Math.abs(h-e)/(h-e);if(r.continuous){var i=n;(n=-c[y(e)]/d)!==i&&(e=-n*l.length+e)}for(var o=Math.abs(h-e)-1;o--;)x(y((h<e?e:h)-o-1),d*n,0);e=y(e),x(h,d*n,t||p),x(e,0,t||p),r.continuous&&x(y(e-n),-d*n,0)}else e=y(e),function(t,n,i){if(!i)return u.style.left=n+"px";var o=+new Date,a=setInterval(function(){var e=+new Date-o;if(i<e)return u.style.left=n+"px",g&&k(),r.transitionEnd&&r.transitionEnd.call(event,h,l[h]),void clearInterval(a);u.style.left=(n-t)*(Math.floor(e/i*100)/100)+t+"px"},4)}(h*-d,e*-d,t||p);h=e,a(r.callback&&r.callback(h,l[h]))}}function x(e,t,n){T(e,t,n),c[e]=t}function T(e,t,n){var i=l[e],o=i&&i.style;o&&(o.webkitTransitionDuration=o.MozTransitionDuration=o.msTransitionDuration=o.OTransitionDuration=o.transitionDuration=n+"ms",o.webkitTransform="translate("+t+"px,0)translateZ(0)",o.msTransform=o.MozTransform=o.OTransform="translateX("+t+"px)")}function k(){e=setTimeout(b,g)}function E(){g=0,clearTimeout(e)}}function distanceOfTimeInWords(e,t,n){var i=e.getTime(),o=t.getTime(),a=Math.round(Math.abs(i-o)/1e3),r=Math.round(a/60);return r<=1?n?a<5?"5 seconde geleden":a<10?"10 seconde geleden":a<20?"20 seconde geleden":a<40?"30 seconde geleden":a<60?"een minuut geleden":"1 minuut geleden":0===r?"minder dan een minuut":"1 minuut":r<45?r+" minuten geleden":r<70?"1 uur geleden":r<1440?Math.round(r/60)+" uur geleden":r<2880?"1 dag geleden":r<43200?Math.round(r/1440)+" dagen geleden":r<86400?"ruim 1 maand geleden":r<525600?Math.round(r/43200)+" maanden geleden":Math.round(r/525600)+" jaren geleden"}function processTweets(e,t){var a=[];return $.each(e,function(e,t){var n=t;n.hasExternalUrl||(t.text=t.text.parseURL()),n.text=t.text.parseUsername().parseHashtag();var i=n.created.parseDate();delete n.created;var o=new Date;n.date=distanceOfTimeInWords(o,i,!0)+" geplaatst",n.tweetUrl="https://twitter.com/-/status/"+n.tweetId,n.retweetUrl="https://twitter.com/intent/retweet?tweet_id="+n.tweetId,n.replyUrl="https://twitter.com/intent/tweet?in_reply_to="+n.tweetId,n.likeUrl="https://twitter.com/intent/like?tweet_id="+n.tweetId,n.followUrl="https://twitter.com/intent/follow?screen_name="+n.screenName,a.push(n)}),a}APP={Views:{},YouTube:{}},function(n,i){if("function"==typeof define&&define.amd)define(["underscore","backbone"],function(e,t){i(n,e,t)});else if("undefined"!=typeof exports){var e=require("underscore"),t=require("backbone");i(n,e,t)}else i(n,n._,n.Backbone)}(this,function(e,u,t){var n=t.ViewState=function(e){var t=e||{};this.attributes=u.clone(t)};return u.extend(n.prototype,t.Events,{get:function(e){return this.attributes[e]},getAttributes:function(){return u.clone(this.attributes)},set:function(e,t,n){var i,o,a,r,s,l=[];if(null===e)return this;for(o in"object"==typeof e?(i=e,n=t):(i={})[e]=t,n||(n={}),s=n.unset,r=n.silent,a=this.attributes,i)t=i[o],u.isEqual(a[o],t)||l.push(o),s?delete a[o]:a[o]=t;if(!r){for(var c=0,d=l.length;c<d;c++)this.trigger("change:"+l[c],this,a[l[c]],n);this.trigger("change",this,n)}return this},unset:function(e,t){return this.set(e,void 0,u.extend({},t,{unset:!0}))},clear:function(e){var t={};for(var n in this.attributes)t[n]=void 0;return this.set(t,u.extend({},e,{unset:!0}))}}),t.ViewState}),APP.Store=function(e,t){var n=new t.Collection,i=new t.ViewState({activeIndex:-1});return{start:function(e){n.reset(e),n.invoke("set",{dataSet:!1})},getState:function(){return i},getSlideCollection:function(){return n}}}(this._,this.Backbone),(window.jQuery||window.Zepto)&&function(t){t.fn.Swipe=function(e){return this.each(function(){t(this).data("Swipe",new Swipe(t(this)[0],e))})}}(window.jQuery||window.Zepto),String.prototype.parseURL=function(){return this.replace(/[A-Za-z]+:\/\/[A-Za-z0-9-_]+\.[A-Za-z0-9-_:%&~\?\/.=]+/g,function(e){return e.link(e).openUrlBlank()})},String.prototype.parseUsername=function(){return this.replace(/ [@]+[A-Za-z0-9-_]+/g,function(e){var t=e.replace(" @","");return e.link("https://twitter.com/"+t).openUrlBlank()})},String.prototype.parseHashtag=function(){return this.replace(/ [#]+[A-Za-z0-9-_]+/g,function(e){var t=e.replace(" #","%23");return e.link("https://twitter.com/search?q="+t).openUrlBlank()})},String.prototype.parseDate=function(){var e=this.replace(/(\+\S+) (.*)/,"$2 $1");return new Date(Date.parse(e))},String.prototype.openUrlBlank=function(){return this.replace(/^<a/,'$& target="_blank"')},function(e,t,i){APP.Views.Slideshow=t.View.extend({initialize:function(e){this.timeSet=e.timeSet,this.templateName=e.templateName,this.handle=e.handle,this.render(),this.listenTo(APP.Store.getState(),"change:activeIndex",this.slide);var t=Math.floor(Math.random()*this.collection.length-1);APP.Store.getState().set("activeIndex",t);var n=document.getElementById("mySwipe");window.mySwipe=i(n,{startSlide:t,auto:this.timeSet,callback:function(e,t){console.log("callback"),APP.Store.getState().set("activeIndex",e)}}),this.binds()},binds:function(){e.bindAll(this,"keyDown"),$(document).on("keydown",this.keyDown)},keyDown:function(e){switch(e.keyCode){case 37:window.mySwipe.prev();break;case 38:this.stopTimerSlide();break;case 39:window.mySwipe.next();break;case 40:this.stopTimerSlide()}},slide:function(){var e,t,n=APP.Store.getState().get("activeIndex"),i=this.collection.length;n===i?n=0:-1===n&&(n=i-1),APP.Store.getState().set("activeIndex",n,{silent:!0}),n===i-1?(e=0,t=n-1):0===n?(t=i-1,e=n+1):(e=n+1,t=n-1);var o=this.$el.find('[data-id="'+t+'"]');this.collection.get(t).get("dataSet")||(this.addContentToTemplate(o,t),"bolcomreclames"===this.handle&&addPlayer(t,this.collection.get(t).get("url")),this.collection.get(t).set("dataSet",!0));var a=this.$el.find('[data-id="'+n+'"]');this.collection.get(n).get("dataSet")||(this.addContentToTemplate(a,n),"bolcomreclames"===this.handle&&addPlayer(n,this.collection.get(n).get("url")),this.collection.get(n).set("dataSet",!0));var r=this.$el.find('[data-id="'+e+'"]');this.collection.get(e).get("dataSet")||(this.addContentToTemplate(r,e),"bolcomreclames"===this.handle&&addPlayer(e,this.collection.get(e).get("url")),this.collection.get(e).set("dataSet",!0))},getTemplateData:function(e){return this.collection.get(e).toJSON()},addContentToTemplate:function(e,t){var n=$(this.templateName).html();this.template=Handlebars.compile(n),e.append(this.template(this.getTemplateData(t)))},render:function(){var e=$("#placeholder-template").html();return this.template=Handlebars.compile(e),this.collection.each(function(e){this.$el.append(this.template(e.toJSON()))},this),this}})}(this._,Backbone,Swipe);var tag=document.createElement("script");tag.src="https://www.youtube.com/iframe_api";var firstScriptTag=document.getElementsByTagName("script")[0];function addPlayer(e,t){console.log(e),APP.YouTube.youtubePlayer=[],APP.YouTube.youtubePlayer[e]=new YT.Player("youtube-player"+e,{width:"100%",height:"100%",videoId:t,events:{onStateChange:onPlayerStateChange}}),console.log(APP.YouTube.youtubePlayer[e])}function onPlayerStateChange(e){switch(console.log(e.target),e.data){case-1:console.log("video unstarted"),console.log("Duration:"+e.target.getDuration());case 0:console.log("video ended");break;case 1:console.log("video playing from "+e.target.getCurrentTime());break;case 2:console.log("video paused at "+e.target.getCurrentTime());break;case 3:console.log("video buffering");case 5:console.log("video cued")}}firstScriptTag.parentNode.insertBefore(tag,firstScriptTag);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
